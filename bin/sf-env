#!/usr/bin/env bash

if [[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] || \
       [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null); then
    # sourced
    true
else
    # executed
    set -euo pipefail
fi

# NOTE exported variables need to be in sync with
# sh/env.inc.sh:11
# build.mk/core.common.mk:9

[[ -n "${SUPPORT_FIRECLOUD_DIR:-}" ]] || {
    if [[ -n "${BASH_VERSION:-}" ]]; then
        SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
        # echo >&2 SUPPORT_FIRECLOUD_DIR=$SUPPORT_FIRECLOUD_DIR
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname ${(%):-%x})/.." && pwd)"
    else
        echo >&2 "Unsupported shell or \$BASH_VERSION and \$ZSH_VERSION are undefined."
        exit 1
    fi
}

function sf_path_prepend() {
    echo ":${PATH}:" | grep -q ":$1:" || export PATH=$1:${PATH}
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

function sf_path_prepend_after() {
    if echo ":${PATH}:" | grep -q ":$2:"; then
        export PATH=$(echo "${PATH}" | sed "s/:$2:/:$2:$1:/")
    else
        sf_path_prepend "$1"
    fi
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

function sf_path_append() {
    echo ":${PATH}:" | grep -q ":$1:" || export PATH=${PATH}:$1
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

function sf_path_append_before() {
    if echo ":${PATH}:" | grep -q ":$2:"; then
      export PATH=$(echo "${PATH}" | sed "s/:$2:/:$1:$2:/")
    else
        sf_path_append "$1"
    fi
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

# remove homebrew (linuxbrew) from PATH which is appended, not prepended (default homebrew behaviour)
# see https://github.com/actions/virtual-environments/pull/789
[[ "${GITHUB_ACTIONS:-}" != "true" ]] || {
    export PATH=$(echo ":${PATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/bin:||" | sed "s|::|:|")
    export PATH=$(echo ":${PATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/sbin:||" | sed "s|::|:|")
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")

    export MANPATH=$(echo ":${MANPATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/share/man:||" | sed "s|::|:|")
    export MANPATH=$(echo "${MANPATH}" | sed "s|^:||" | sed "s|:$||")

    export INFOPATH=$(echo ":${INFOPATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/share/man:||" | sed "s|::|:|")
    export INFOPATH=$(echo "${INFOPATH}" | sed "s|^:||" | sed "s|:$||")
}

# jq becomes always available
# NOTE if needed to bypass system's jq, call sf-jq
sf_path_append ${SUPPORT_FIRECLOUD_DIR}/bin/.jq

if [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    sf_path_prepend /home/linuxbrew/.linuxbrew/sbin
    sf_path_prepend /home/linuxbrew/.linuxbrew/bin
elif [ -x ${HOME}/.linuxbrew/bin/brew ]; then
    sf_path_prepend ${HOME}/.linuxbrew/sbin
    sf_path_prepend ${HOME}/.linuxbrew/bin
fi
sf_path_prepend /usr/local/sbin
sf_path_prepend /usr/local/bin
sf_path_prepend ${HOME}/.local/sbin
sf_path_prepend ${HOME}/.local/bin

[[ -n "${NVM_DIR:-}" ]] || export NVM_DIR=${HOME}/.nvm

if command -v brew >/dev/null 2>&1; then
    HOMEBREW_PREFIX=$(brew --prefix)
    sf_path_prepend ${HOMEBREW_PREFIX}/sbin
    sf_path_prepend ${HOMEBREW_PREFIX}/bin

    for f in coreutils findutils gnu-sed gnu-tar gnu-time gnu-which grep gzip make; do
        sf_path_prepend ${HOMEBREW_PREFIX}/opt/${f}/libexec/gnubin
    done
    for f in curl gettext gnu-getopt unzip zip; do
        sf_path_prepend ${HOMEBREW_PREFIX}/opt/${f}/bin
    done

    type nvm >/dev/null 2>&1 || {
        # using a less exact call because 'brew --prefix nvm' is very very slow
        # NVM_INSTALLATION_DIR=$(brew --prefix nvm 2>/dev/null || true)
        NVM_INSTALLATION_DIR=${HOMEBREW_PREFIX}/opt/nvm
        # shellcheck disable=SC1091
        [[ ! -r ${NVM_INSTALLATION_DIR}/nvm.sh ]] || source ${NVM_INSTALLATION_DIR}/nvm.sh --no-use
        unset NVM_INSTALLATION_DIR
    }

    if command -v asdf >/dev/null 2>&1; then
        [[ -n "${ASDF_DIR:-}" ]] || {
            # using a less exact call because 'brew --prefix asdf' is very very slow
            # source $(brew --prefix asdf)/asdf.sh
            # shellcheck disable=SC1091
            source ${HOMEBREW_PREFIX}/opt/asdf/asdf.sh
        }
    fi

    unset HOMEBREW_PREFIX
fi

if command -v docker >/dev/null 2>&1; then
    # disable buildkit which is not ready for primetime, but enabled by default on macos
    # see https://github.com/moby/buildkit/issues/1472
    export DOCKER_BUILDKIT=0
fi

if [[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] || \
       [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null); then
    # sourced
    true
else
    # executed (from build.mk/core.common.mk)
    eval "echo \${$1}"
fi
