#!/usr/bin/env bash
set -euo pipefail

SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source ${SUPPORT_FIRECLOUD_DIR}/priv/common.inc.sh

AWS_PROFILE=${AWS_PROFILE:-${AWS_DEFAULT_PROFILE:-}}
[[ -n ${AWS_PROFILE} ]] || exit 0

AWS_PROFILE_ROLE_ARN=$(aws configure get role_arn || true)
[[ -n ${AWS_PROFILE_ROLE_ARN} ]] || exit 0
STS_ASSUME_ROLE_ARN_PREFIX=${AWS_PROFILE_ROLE_ARN/iam/sts}
STS_ASSUME_ROLE_ARN_PREFIX=${STS_ASSUME_ROLE_ARN_PREFIX/:role\//:assumed-role\/}

# AWS_CLI_CACHE_FILE=$(ls ~/.aws/cli/cache/ | grep "^${AWS_PROFILE}--arn_aws_iam__" | head -1 || true)
# gross assumption, but aws-cli/boto changed to hash-named filenames
AWS_CLI_CACHE_FILE=
for f in $(ls -t ~/.aws/cli/cache/); do
    cat ~/.aws/cli/cache/$f | \
        python2 -c 'import sys,json;print json.load(sys.stdin)["AssumedRoleUser"]["Arn"]' | \
        grep -q "${STS_ASSUME_ROLE_ARN_PREFIX}" && \
        AWS_CLI_CACHE_FILE=$f && \
        break || \
            true
done
[[ -n ${AWS_CLI_CACHE_FILE} ]] || exit 0

AWS_CLI_CACHE_FILE_EXPIRATION=$(cat ~/.aws/cli/cache/${AWS_CLI_CACHE_FILE} | python2 -c 'import sys,json;print json.load(sys.stdin)["Credentials"]["Expiration"]')
[[ $(date -d "${AWS_CLI_CACHE_FILE_EXPIRATION}" +%s) -ge $(date +%s) ]] || exit 0

AWS_CLI_CACHE_FILE=~/.aws/cli/cache/${AWS_CLI_CACHE_FILE}

[[ -n ${AWS_SECRET_ACCESS_KEY:-} ]] || \
   AWS_SECRET_ACCESS_KEY=$(cat ${AWS_CLI_CACHE_FILE} | python2 -c 'import sys,json;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]')
[[ -n ${AWS_ACCESS_KEY_ID:-} ]] || \
  AWS_ACCESS_KEY_ID=$(cat ${AWS_CLI_CACHE_FILE} | python2 -c 'import sys,json;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]')
[[ -n ${AWS_SESSION_TOKEN:-} ]] || \
  AWS_SESSION_TOKEN=$(cat ${AWS_CLI_CACHE_FILE} | python2 -c 'import sys,json;print json.load(sys.stdin)["Credentials"]["SessionToken"]')

echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
