#!/usr/bin/env bash
# shellcheck disable=SC2034
set -euo pipefail

#- ci-printvars 1.0
## Usage: ci-printvars
## Print CI_* vars in a platform-agnostic way.

SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://www.appveyor.com/docs/environment-variables/

function sf_ci_env_appveyor() {
    [[ "${APPVEYOR:-}" = "true" ]] || return 0

    [[ "${APPVEYOR_REPO_PROVIDER:-}" = "github" ]]

    export CI=true
    CI_NAME=Appveyor
    CI_PLATFORM=appveyor
    CI_SERVER_HOST=${APPVEYOR_URL:-ci.appveyor.com}
    CI_SERVER_HOST=${CI_SERVER_HOST#*://}
    CI_REPO_SLUG=${APPVEYOR_REPO_NAME:-}
    CI_ROOT=${APPVEYOR_BUILD_FOLDER}

    CI_IS_CRON=${APPVEYOR_SCHEDULED_BUILD:-}
    CI_IS_PR=
    [[ -z "${APPVEYOR_PULL_REQUEST_NUMBER:-}" ]] || CI_IS_PR=true

    CI_JOB_ID=${APPVEYOR_JOB_ID:-}
    CI_PIPELINE_ID=${APPVEYOR_BUILD_NUMBER:-}
    # CI_JOB_URL=${CI_SERVER_HOST}/project/${APPVEYOR_ACCOUNT_NAME:-}/${APPVEYOR_PROJECT_SLUG:-}/builds/${CI_JOB_ID}
    CI_JOB_URL=${CI_SERVER_HOST}/project/${APPVEYOR_ACCOUNT_NAME:-}/${APPVEYOR_PROJECT_SLUG:-}/build/job/${CI_JOB_ID}
    CI_PIPELINE_URL=${CI_SERVER_HOST}/project/${APPVEYOR_ACCOUNT_NAME:-}/${APPVEYOR_PROJECT_SLUG:-}/build/${CI_PIPELINE_ID} # editorconfig-checker-disable-line

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_REPO_URL=https://github.com/${CI_REPO_SLUG}/pull/${APPVEYOR_PULL_REQUEST_NUMBER:-}
        CI_PR_REPO_SLUG=${APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME:-}
        CI_PR_GIT_HASH=${APPVEYOR_PULL_REQUEST_HEAD_COMMIT:-}
        CI_PR_GIT_BRANCH=${APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH:-}
    }

    CI_GIT_HASH=${APPVEYOR_REPO_COMMIT:-}
    CI_GIT_BRANCH=${APPVEYOR_REPO_BRANCH:-}
    CI_GIT_TAG=${APPVEYOR_REPO_TAG_NAME:-}

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_appveyor() {
    printenv | grep "^CI[=_]"
    printenv | grep "^APPVEYOR[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

function sf_ci_env_circle() {
    [[ "${CIRCLECI:-}" = "true" ]] || return 0

    [[ "${CIRCLE_REPOSITORY_URL:-}" =~ github.com ]]

    export CI=true
    CI_NAME=CircleCI
    CI_PLATFORM=circle
    CI_SERVER_HOST=circleci.com
    CI_REPO_SLUG=${CIRCLE_PROJECT_USERNAME:-}/${CIRCLE_PROJECT_REPONAME:-}
    CI_ROOT=${CIRCLE_WORKING_DIRECTORY:-}

    CI_IS_CRON=${CI_IS_CRON:-} # needs to come from .circleci/config.yml
    CI_IS_PR=
    [[ -z "${CIRCLE_PR_NUMBER:-}" ]] || CI_IS_PR=true # only on forked PRs
    [[ -z "${CIRCLE_PULL_REQUEST:-}" ]] || CI_IS_PR=true

    # CI_JOB_ID=${CIRCLE_BUILD_NUM:-}.${CIRCLE_NODE_INDEX:-}
    CI_JOB_ID=${CIRCLE_BUILD_NUM:-}
    CI_PIPELINE_ID=${CIRCLE_WORKFLOW_ID:-}
    CI_JOB_URL=${CIRCLE_BUILD_URL:-}
    # see https://discuss.circleci.com/t/add-a-workflow-url-like-the-previous-v1-job-api-job-url-to-the-get-pipeline-pipeline-id-workflow-api/35921 # editorconfig-checker-disable-line
    CI_PIPELINE_URL=https://app.${CI_SERVER_HOST}/pipelines/workflows/${CI_PIPELINE_ID}

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL=https://github.com/${CI_REPO_SLUG}/pull/${CIRCLE_PR_NUMBER:-}
        CI_PR_REPO_SLUG=${CIRCLE_PR_USERNAME:-}/${CIRCLE_PR_REPONAME:-}
        CI_PR_GIT_HASH= # TODO
        CI_PR_GIT_BRANCH=${CIRCLE_BRANCH:-}
    }

    CI_GIT_HASH=${CIRCLE_SHA1:-}
    CI_GIT_BRANCH=${CIRCLE_BRANCH:-}
    [[ "${CI_IS_PR}" != "true" ]] || CI_GIT_BRANCH=
    CI_GIT_TAG=${CIRCLE_TAG:-}

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
    export USER=$(whoami)
}

function sf_ci_printvars_circle() {
    printenv | grep "^CI[=_]"
    printenv | grep "^CIRCLE[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://cirrus-ci.org/guide/writing-tasks/#environment-variables

function sf_ci_env_cirrus() {
    [[ "${CIRRUS_CI:-}" = "true" ]] || return 0

    [[ "${CIRRUS_REPO_CLONE_HOST:-}" = "github.com" ]]

    export CI=true
    CI_NAME="Cirrus CI"
    CI_PLATFORM=cirrus
    CI_SERVER_HOST=cirrus-ci.com
    CI_REPO_SLUG=${CIRRUS_REPO_FULL_NAME:-}
    CI_ROOT=${CIRRUS_WORKING_DIR:-}

    CI_IS_CRON=
    [[ -z "${CIRRUS_CRON:-}" ]] || CI_IS_CRON=true
    CI_IS_PR=
    [[ -z "${CIRRUS_PR:-}" ]] || CI_IS_PR=true


    CI_JOB_ID=${CIRRUS_BUILD_ID:-}
    CI_PIPELINE_ID=${CIRRUS_TASK_ID:-}
    CI_JOB_URL=https://cirrus-ci.com/build/${CI_PIPELINE_ID}
    CI_PIPELINE_URL=https://cirrus-ci.com/task/${CI_JOB_ID}

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL=https://github.com/${CI_REPO_SLUG}/pull/${CIRRUS_PR:-}
        CI_PR_REPO_SLUG= # TODO
        CI_PR_GIT_HASH= # TODO
        CI_PR_GIT_BRANCH=${CIRRUS_BRANCH:-}
    }

    CI_GIT_HASH=${CIRRUS_CHANGE_IN_REPO:-}
    CI_GIT_BRANCH=${CIRRUS_BRANCH:-}
    [[ "${CI_IS_PR}" != "true" ]] || CI_GIT_BRANCH=${CIRRUS_BASE_BRANCH:-}
    CI_GIT_TAG=${CIRRUS_TAG:-}

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_cirrus() {
    printenv | grep "^CI[=_]"
    printenv | grep "^CIRRUS[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables

function sf_ci_env_codeship() {
    [[ "${CI_NAME:-}" = "codeship" ]] || return 0

    export CI=true
    CI_NAME=Codeship
    CI_PLATFORM=codeship
    CI_SERVER_HOST=codeship.com
    # CI_REPO_SLUG=${?????????????????}/${CI_REPO_NAME}
    # CI_REPO_SLUG=$(git remote -v 2>/dev/null | grep -oP "(?<=.com.).+" | grep -oP ".+(?= \(fetch\))" | head -n1 | sed "s/.git$//") # editorconfig-checker-disable-line
    CI_REPO_SLUG=${CI_REPO_NAME:-}
    CI_ROOT= # TODO

    CI_IS_CRON= # TODO
    CI_IS_PR=
    # codeship set CI_PR_NUMBER=0 for non-PR executions...
    [[ -z "${CI_PR_NUMBER:-}" ]] || [[ "${CI_PR_NUMBER:-}" = "0" ]] || CI_IS_PR=true
    [[ -z "${CI_PULL_REQUEST:-}" ]] || [[ "${CI_PR_NUMBER:-}" = "0" ]] || CI_IS_PR=true

    CI_JOB_ID=${CI_BUILD_ID_:-}
    CI_PIPELINE_ID=${CI_BUILD_NUMBER:-}
    CI_JOB_URL=https://app.codeship.com/projects/${CI_PROJECT_ID:-}/builds/${CI_JOB_ID}
    CI_PIPELINE_URL=${CI_BUILD_URL:-}

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        # CI_PR_URL=https://github.com/${CI_REPO_SLUG}/pull/${CI_PR_NUMBER}
        CI_PR_URL=${CI_PULL_REQUEST:-}
        CI_PR_REPO_SLUG= # TODO
        CI_PR_GIT_HASH= # TODO
        CI_PR_GIT_BRANCH= # TODO
    }

    CI_GIT_HASH=${CI_COMMIT_ID:-}
    CI_GIT_BRANCH=${CI_BRANCH:-}
    CI_GIT_TAG= # TODO

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_codeship() {
    printenv | grep "^CI[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables

function sf_ci_env_github() {
    [[ "${GITHUB_ACTIONS:-}" = "true" ]] || return 0

    export CI=true
    CI_NAME="GitHub Actions"
    CI_PLATFORM=github
    CI_SERVER_HOST=${GITHUB_SERVER_URL:-github.com}
    CI_SERVER_HOST=${CI_SERVER_HOST#*://}
    CI_REPO_SLUG=${GITHUB_REPOSITORY}
    CI_ROOT=${GITHUB_WORKSPACE:-}

    CI_IS_CRON=
    [[ -n "${GITHUB_EVENT_NAME:-}" ]] || CI_IS_CRON=true
    CI_IS_PR=
    [[ "${GITHUB_EVENT_NAME:-}" != "pull_request" ]] || CI_IS_PR=true

    CI_JOB_ID=$(${SUPPORT_FIRECLOUD_DIR}/bin/github-get-job-id)
    CI_PIPELINE_ID=${GITHUB_RUN_ID:-}
    # CI_JOB_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks?check_suite_id=FIXME"
    CI_JOB_URL="${GITHUB_SERVER_URL:-}/${CI_REPO_SLUG}/runs/${CI_JOB_ID}?check_suite_focus=true"
    CI_PIPELINE_URL="${GITHUB_SERVER_URL:-}/${CI_REPO_SLUG}/actions/runs/${CI_PIPELINE_ID}"

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL=$(jq -r .github.event.pull_request.url ${GITHUB_EVENT_PATH})
        CI_PR_REPO_SLUG=$(jq -r .github.event.pull_request.head.repo.full_name ${GITHUB_EVENT_PATH})
        CI_PR_GIT_HASH=$(jq -r .github.event.pull_request.head.sha ${GITHUB_EVENT_PATH})
        CI_PR_GIT_BRANCH=$(jq -r .github.event.pull_request.head.ref ${GITHUB_EVENT_PATH})
    }

    CI_GIT_HASH=${GITHUB_SHA:-}
    CI_GIT_BRANCH=
    [[ ! "${GITHUB_REF:-}" =~ ^refs/heads/ ]] || CI_GIT_BRANCH=${GITHUB_REF#refs/heads/}
    CI_GIT_TAG=
    [[ ! "${GITHUB_REF:-}" =~ ^refs/tags/ ]] || CI_GIT_TAG=${GITHUB_REF#refs/tags/}

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_github() {
    printenv | grep "^CI[=_]"
    printenv | grep "^GITHUB[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html

function sf_ci_env_gitlab() {
    [[ "${GITLAB_CI:-}" = "true" ]] || return 0

    # TODO handle external_pull_request_event
    [[ "${CI_PIPELINE_SOURCE:-}" != "external_pull_request_event" ]]

    export CI=true
    CI_NAME="GitLab CI/CD"
    CI_PLATFORM=gitlab
    CI_SERVER_HOST=${CI_SERVER_HOST:-gitlab.com}
    CI_REPO_SLUG=${CI_PROJECT_PATH:-}
    CI_ROOT=${CI_PROJECT_DIR:-}

    CI_IS_CRON=
    [[ "${CI_PIPELINE_SOURCE:-}" != "schedule" ]] || CI_IS_CRON=true
    CI_IS_PR=
    [[ -z "${CI_MERGE_REQUEST_ID:-}" ]] || CI_IS_PR=true

    # 1 pipeline -> n jobs
    CI_JOB_ID=${CI_JOB_ID:-}
    CI_PIPELINE_ID=${CI_PIPELINE_ID:-}
    CI_JOB_URL=${CI_JOB_URL:-}
    CI_PIPELINE_URL=${CI_PIPELINE_URL:-${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}}

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL=${CI_PROJECT_URL}/-/merge_requests/${CI_MERGE_REQUEST_ID:-}
        CI_PR_REPO_SLUG=${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH:-}
        CI_PR_GIT_HASH=${CI_MERGE_REQUEST_SOURCE_BRANCH_SHA:-}
        CI_PR_GIT_BRANCH=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-}
    }

    CI_GIT_HASH=${CI_COMMIT_SHA:-}
    CI_GIT_BRANCH=${CI_COMMIT_REF_NAME:-}
    [[ "${CI_IS_PR}" != "true" ]] || CI_GIT_BRANCH=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-}
    CI_GIT_TAG=${CI_COMMIT_TAG:-}

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_gitlab() {
    printenv | grep "^CI[=_]"
    printenv | grep "^GITLAB[=_]"
    printenv | grep "^TRIGGER_PAYLOAD="
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://docs.semaphoreci.com/ci-cd-environment/environment-variables/

function sf_ci_env_semaphore() {
    [[ "${SEMAPHORE:-}" = "true" ]] || return 0

    export CI=true
    CI_NAME=Semaphore
    CI_PLATFORM=semaphore
    CI_SERVER_HOST=${SEMAPHORE_ORGANIZATION_URL:-semaphoreci.com}
    CI_SERVER_HOST=${CI_SERVER_HOST#*://}
    CI_REPO_SLUG=${SEMAPHORE_GIT_REPO_SLUG:-}
    CI_ROOT=${SEMAPHORE_GIT_DIR:-}

    CI_IS_CRON=${SEMAPHORE_WORKFLOW_TRIGGERED_BY_SCHEDULE:-}
    CI_IS_PR=
    [[ -z "${SEMAPHORE_GIT_PR_SLUG:-}" ]] || CI_IS_PR=true

    CI_JOB_ID=${SEMAPHORE_JOB_ID:-}
    CI_PIPELINE_ID=${SEMAPHORE_WORKFLOW_ID:-}
    CI_JOB_URL="${SEMAPHORE_ORGANIZATION_URL:-}/jobs/${CI_JOB_ID}"
    CI_PIPELINE_URL="${SEMAPHORE_ORGANIZATION_URL:-}/workflows/${CI_PIPELINE_ID}"

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL=https://github.com/${CI_REPO_SLUG}/pull/${SEMAPHORE_GIT_PR_NUMBER:-}
        CI_PR_REPO_SLUG=${SEMAPHORE_GIT_PR_SLUG:-}
        CI_PR_GIT_HASH=${SEMAPHORE_GIT_PR_SHA:-}
        CI_PR_GIT_BRANCH=${SEMAPHORE_GIT_PR_BRANCH:-}
    }

    CI_GIT_HASH=${SEMAPHORE_GIT_SHA:-}
    CI_GIT_BRANCH=${SEMAPHORE_GIT_BRANCH:-}
    CI_GIT_TAG=${SEMAPHORE_GIT_TAG_NAME:-}

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_semaphore() {
    printenv | grep "^CI[=_]"
    printenv | grep "^SEMAPHORE[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://man.sr.ht/builds.sr.ht/

function sf_ci_env_sourcehut() {
    [[ "${CI_NAME:-}" = "sourcehut" ]] || return 0

    # TODO sourcehut hasn't been fully tested. narrowing the scope
    [[ "${BUILD_REASON}" = "github-commit" ]] # only github webhooks
    [[ "${GITHUB_EVENT}" = "push" ]] # only push
    [[ ${GITHUB_REF} =~ ^refs/heads/ ]] # only branches

    export CI=true
    CI_NAME=sourcehut
    CI_PLATFORM=sourcehut
    CI_SERVERT_HOST=sourcehut.org
    CI_REPO_SLUG=
    CI_ROOT=${HOME}

    CI_IS_CRON=
    CI_IS_PR= # TODO

    CI_JOB_ID=${JOB_ID:-}
    CI_PIPELINE_ID=${CI_JOB_ID}
    CI_JOB_URL=${JOB_URL:-}
    CI_PIPELINE_URL=${CI_JOB_URL}

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL= # TODO
        CI_PR_REPO_SLUG= # TODO
        CI_PR_GIT_HASH= # TODO
        CI_PR_GIT_BRANCH= # TODO
    }

    CI_GIT_HASH= # TODO
    CI_GIT_BRANCH # TODO
    CI_GIT_TAG= # TODO

    CI_DEBUG_MODE=${CI_DEBUG_MODE:-}
}

function sf_ci_printvars_sourcehut() {
    printenv | grep "^BUILD[=_]"
    printenv | grep "^CI[=_]"
    printenv | grep "^GITHUB[=_]"
    printenv | grep "^JOB[=_]"
    printenv | grep "^PATCHSET[=_]"
}
#!/usr/bin/env bash
# shellcheck disable=SC2034
true

# see https://docs-staging.travis-ci.com/user/environment-variables/#default-environment-variables

function sf_ci_env_travis() {
    [[ "${TRAVIS:-}" = "true" ]] || return 0

    export CI=true
    CI_NAME="Travis CI"
    CI_PLATFORM=travis
    CI_SERVER_HOST=travis-ci.org
    CI_REPO_SLUG=${TRAVIS_REPO_SLUG:-}
    CI_ROOT=${TRAVIS_BUILD_DIR:-}

    CI_IS_CRON=false
    [[ "${TRAVIS_EVENT_TYPE}" != "cron" ]] || CI_IS_CRON=true
    CI_IS_PR=false
    [[ "${TRAVIS_EVENT_TYPE}" != "pull_request" ]] || CI_IS_PR=true

    CI_JOB_ID=${TRAVIS_JOB_ID:}
    CI_PIPELINE_ID=${TRAVIS_BUILD_NUMBER:-}
    CI_JOB_URL=${TRAVIS_JOB_WEB_URL:-}
    CI_PIPELINE_URL=${TRAVIS_BUILD_WEB_URL:-}

    CI_PR_URL=
    CI_PR_REPO_SLUG=
    CI_PR_GIT_HASH=
    CI_PR_GIT_BRANCH=
    [[ "${CI_IS_PR}" != "true" ]] || {
        CI_PR_URL=https://github.com/${CI_REPO_SLUG}/pull/${TRAVIS_PULL_REQUEST:-}
        CI_PR_REPO_SLUG=${TRAVIS_PULL_REQUEST_SLUG:-}
        CI_PR_GIT_HASH=${TRAVIS_PULL_REQUEST_SHA:-}
        CI_PR_GIT_BRANCH=${TRAVIS_PULL_REQUEST_BRANCH:-}
    }

    CI_GIT_HASH=${TRAVIS_COMMIT:-}
    CI_GIT_BRANCH=${TRAVIS_BRANCH:-}
    CI_GIT_TAG=${TRAVIS_TAG:-}

    CI_DEBUG_MODE=${TRAVIS_DEBUG_MODE:-}
}

function sf_ci_printvars_travis() {
    printenv | grep "^CI[=_]"
    printenv | grep "^TRAVIS[=_]"
}
for SF_CI_ENV_INC_SH_PLATFORM in  appveyor circle cirrus codeship github gitlab semaphore sourcehut travis; do
    eval "sf_ci_env_${SF_CI_ENV_INC_SH_PLATFORM}"
done

# cannot use printenv because variables are not exported
# printenv | grep "^CI[_=]"
compgen -A variable | sort -u | grep -e "^CI$" -e "^CI_" | while read -r NO_XARGS_R; do
    [[ -n "${NO_XARGS_R}" ]] || continue;
    echo "${NO_XARGS_R}=${!NO_XARGS_R}"
done
