#!/usr/bin/env bash
# shellcheck disable=SC2034
set -euo pipefail

YP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." >/dev/null && pwd)"
source ${YP_DIR}/sh/common.inc.sh

#- ci-printvars 1.0
## Usage: ci-printvars
## Print detected-CI-platform's environment variables.
##
##       --yp       Print only YP_CI_* environment variables.
##       --unknown  Print only unknown environment variables' name.
##
##   -h, --help     Display this help and exit
##   -v, --version  Output version information and exit

if { getopt --test >/dev/null 2>&1 && false; } || [[ "$?" = "4" ]] || false; then
    ARGS=$(getopt -o hv -l help,version,yp,unknown -n $(basename ${BASH_SOURCE[0]}) -- "$@") || sh_script_usage
    eval set -- "${ARGS}"
fi

YP=false
UNKNOWN=false

while [[ $# -gt 0 ]]; do
    case "$1" in
        --yp)
            YP=true
            shift
            ;;
        --unknown)
            UNKNOWN=true
            shift
            ;;
        -h|--help)
            sh_script_usage
            ;;
        -v|--version)
            sh_script_version
            ;;
        --)
            shift
            break
            ;;
        -*)
            sh_script_usage
            ;;
        *)
            break
            ;;
    esac
done
[[ $# -eq 0 ]] || sh_script_usage

source ${YP_DIR}/ci/util/ci-env.inc.sh

[[ -n "${YP_CI_PLATFORM:-}" ]] || {
    echo "${YP_CI_PLATFORM:-}"
    echo_warn "No CI platform detected."
    exit 0
}

PLATFORM=${YP_CI_PLATFORM}
[[ "${YP}" != "true" ]] || PLATFORM=yp

[[ "${UNKNOWN}" != "true" ]] || {
    comm -23 \
        <("yp_ci_printvars_${PLATFORM}" | sed "s/=.*//g" | grep "^[a-zA-Z_][a-zA-Z0-9_]*$" | sort -u) \
        <("yp_ci_known_env_${PLATFORM}" | sort -u) | \
        ${YP_DIR}/bin/ifne --not --fail --print-on-fail
    exit 0
}

"yp_ci_printvars_${PLATFORM}"
