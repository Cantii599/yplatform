#!/usr/bin/env bash
(set -o igncr) 2>/dev/null && set -o igncr; # Magic to make it work under cygwin

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOP="$(cd ${DIR}/../.. && pwd)"
source ${TOP}/support/sh/common.inc.sh

#- aws-cu-stack 1.0
## Usage: aws-cu-stack STACK_NAME
## Create or update a stack id given a stack name.
##
##   -h, --help     Display this help and exit
##   -v, --version  Output version information and exit

TIMEOUT_ARG="--timeout-in-minutes 60"
CAPABILITIES_ARG="--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM"
WAIT_FOR_STACK=
CREATE_CHANGE_SET=
EXECUTE_CHANGE_SET=
CHANGE_SET_NAME=
CHANGE_SET_FILE=/dev/null

while [[ $# -gt 0 ]]; do
    case "$1" in
        --stack-name)
            STACK_NAME=$2
            STACK_NAME_ARG="$1 $2"
            shift 2
            ;;
        --timeout-in-minutes)
            TIMEOUT_ARG="$1 $2"
            shift 2
            ;;
        --capabilities)
            CAPABILITIES_ARG="$1 $2"
            shift 2
            ;;
        --wait)
            WAIT_FOR_STACK=true
            shift
            ;;
        --create-change-set)
            CREATE_CHANGE_SET=true
            shift
            ;;
        --execute-change-set)
            EXECUTE_CHANGE_SET=true
            shift
            ;;
        --change-set-name)
            CHANGE_SET_NAME=$2
            CHANGE_SET_NAME_ARG="$1 $2"
            shift 2
            ;;
        --change-set-file)
            CHANGE_SET_FILE=$2
            shift 2
            ;;
        -h|--help)
            sh_script_usage
            ;;
        -v|--version)
            sh_script_version
            ;;
        # -* )
        #     sh_script_usage
        #     ;;
        *)
            break
            ;;
    esac
done

STACK_ID=$(${DIR}/aws-get-stack-id ${STACK_NAME} || :)

CU=create
[[ -z ${STACK_ID} ]] || CU=update

if [[ ${CU} = create ]]; then
    SED_UNTIL="^\]"
else
    SED_UNTIL=$(aws cloudformation describe-stack-events ${STACK_NAME_ARG} --max-items 1 | json "StackEvents[0].EventId")
fi

if [[ -n ${CREATE_CHANGE_SET} ]]; then
    if [[ ${CU} = create ]]; then
        echo >&2 Stack does not exit, thus change-sets are not applicable.
        exit 1
    fi
    echo "Creating change-set for ${STACK_ID} aka ${STACK_NAME} stack..."
    CHANGE_SET_ID=$(aws cloudformation create-change-set ${STACK_NAME_ARG} ${CAPABILITIES_ARG} ${CHANGE_SET_NAME_ARG} $@ | json "Id")
    CHANGE_SET_NAME_ARG="--change-set-name ${CHANGE_SET_ID}"
    TMP_CHANGE_SET_FILE=$(mktemp -t aws-cu-stack.XXXXXXXXXX)
        while true; do
            case $(aws cloudformation describe-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG} | json "Status") in
                CREATE_IN_PROGRESS|CREATE_PENDING) sleep 5 ;;
                *) break ;;
            esac
        done
    aws cloudformation describe-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG} | tee ${TMP_CHANGE_SET_FILE}
    cp ${TMP_CHANGE_SET_FILE} ${CHANGE_SET_FILE}
    exit 0
elif [[ -n ${EXECUTE_CHANGE_SET} ]]; then
    if [[ ${CU} = create ]]; then
        echo >&2 Stack does not exit, thus change-sets are not applicable.
        exit 1
    fi
    if [[ -n ${CHANGE_SET_FILE} ]]; then
        CHANGE_SET_NAME=$(cat ${CHANGE_SET_FILE} | json "ChangeSetName")
        CHANGE_SET_ID=$(cat ${CHANGE_SET_FILE} | json "ChangeSetId")
        CHANGE_SET_NAME_ARG="--change-set-name ${CHANGE_SET_ID}"
    fi
    echo "Executing ${CHANGE_SET_ID} aka ${CHANGE_SET_NAME} change-set for ${STACK_ID} aka ${STACK_NAME} stack..."
    aws cloudformation execute-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG}
else
    if [[ ${CU} = create ]]; then
        # echo "Creating ${STACK_NAME} stack..."
        STACK_ID=$(aws cloudformation ${CU}-stack ${STACK_NAME_ARG} ${TIMEOUT_ARG} ${CAPABILITIES_ARG} --on-failure DELETE $@ | json "StackId")
        STACK_NAME_ARG="--stack-name ${STACK_ID}"
    else
        # echo "Updating ${STACK_ID} aka ${STACK_NAME} stack..."
        # aws cloudformation ${CU}-stack ${STACK_NAME_ARG} $@

        echo "Creating change-set for ${STACK_ID} aka ${STACK_NAME} stack..."
        CHANGE_SET_ID=$(aws cloudformation create-change-set ${STACK_NAME_ARG} ${CAPABILITIES_ARG} ${CHANGE_SET_NAME_ARG} $@ | json "Id")
        CHANGE_SET_NAME_ARG="--change-set-name ${CHANGE_SET_ID}"
        TMP_CHANGE_SET_FILE=$(mktemp -t aws-cu-stack.XXXXXXXXXX)
        while true; do
            case $(aws cloudformation describe-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG} | json "Status") in
                CREATE_IN_PROGRESS|CREATE_PENDING) sleep 5 ;;
                *) break ;;
            esac
        done
        aws cloudformation describe-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG} | tee ${TMP_CHANGE_SET_FILE}
        cp ${TMP_CHANGE_SET_FILE} ${CHANGE_SET_FILE}

        echo "Executing change-set ${CHANGE_SET_ID} aka ${CHANGE_SET_NAME} for ${STACK_ID} aka ${STACK_NAME} stack..."
        STATUS_REASON=$(cat ${TMP_CHANGE_SET_FILE} | json "StatusReason")
        if [[ ${STATUS_REASON} = "The submitted information didn't contain changes. Submit different information to create a change set." ]]; then
            echo ${STATUS_REASON}
            exit 0
        fi
        aws cloudformation execute-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG}
    fi
fi

# if [[ ${CU} = create ]]; then
#     # echo "Creating ${STACK_NAME} stack..."
#     [[ -z ${CREATE_CHANGE_SET} ]] && [[ -z ${CHANGE_SET_NAME} ]] || {
#         echo >&2 Stack does not exit, thus change sets are not applicable.
#         exit 1
#     }
#     STACK_ID=$(aws cloudformation ${CU}-stack ${STACK_NAME_ARG} ${TIMEOUT_ARG} ${CAPABILITIES_ARG} --on-failure DELETE $@ | json "StackId")
#     STACK_NAME_ARG="--stack-name ${STACK_ID}"
# elif [ ${CU} = update ]; then
#     STACK_NAME_ARG="--stack-name ${STACK_ID}"
#     if [[ -n ${CREATE_CHANGE_SET} ]]; then
#         # echo "Creating change-set for ${STACK_ID} aka ${STACK_NAME} stack..."
#         CHANGE_SET_ID=$(aws cloudformation create-change-set ${STACK_NAME_ARG} ${CAPABILITIES_ARG} ${CHANGE_SET_NAME_ARG} $@ | json "Id")
#         CHANGE_SET_NAME_ARG="--change-set-name ${CHANGE_SET_ID}"
#         aws cloudformation describe-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG} | tee ./${CHANGE_SET_NAME}.change-set.json
#         exit 0
#     elif [[ -n ${CHANGE_SET_NAME} ]]; then
#         # echo "Update change-set for ${STACK_ID} aka ${STACK_NAME} stack..."
#         aws cloudformation execute-change-set ${STACK_NAME_ARG} ${CHANGE_SET_NAME_ARG} $@
#     else
#         # echo "Updating ${STACK_ID} aka ${STACK_NAME} stack..."
#         aws cloudformation ${CU}-stack ${STACK_NAME_ARG} $@
#     fi
# fi

[[ -n ${WAIT_FOR_STACK} ]] || exit 0

echo "Waiting for stack-${CU}-complete..."
aws cloudformation wait stack-${CU}-complete ${STACK_NAME_ARG} || {
    aws cloudformation describe-stack-events ${STACK_NAME_ARG} | json "StackEvents" | sed -e "/${SED_UNTIL}/q"
    exit 1
}
