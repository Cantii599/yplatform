#!/usr/bin/env bash
(set -o igncr) 2>/dev/null && set -o igncr; # Magic to make it work under cygwin

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOP="$(cd ${DIR}/../.. && pwd)"
source ${TOP}/support/sh/common.inc.sh

#- aws-cu-stack 1.0
## Usage: aws-cu-stack STACK_NAME
## Create or update a stack id given a stack name.
##
##   -h, --help     Display this help and exit
##   -v, --version  Output version information and exit

while [[ $# -gt 0 ]]; do
    case "$1" in
        --stack-name)
            STACK_NAME=$2
            shift 2
            ;;
        --timeout-in-minutes)
            TIMEOUT_ARG="--timeout-in-minutes $2"
            shift 2
            ;;
        --capabilities)
            CAPABILITIES_ARG="--capabilities $2"
            shift 2
            ;;
        --wait)
            WAIT_FOR_STACK=true
            shift
            ;;
        -h|--help)
            sh_script_usage
            ;;
        -v|--version)
            sh_script_version
            ;;
        # -* )
        #     sh_script_usage
        #     ;;
        *)
            break
            ;;
    esac
done

TIMEOUT_ARG=${TIMEOUT_ARG:-"--timeout-in-minutes 60"}
CAPABILITIES_ARG=${CAPABILITIES_ARG:-"--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM"}
STACK_ID=$(${DIR}/aws-get-stack-id ${STACK_NAME} || :)

if [ -z "${STACK_ID}" ]; then
    CU=create
    echo "Creating ${STACK_NAME}..."
    STACK_ID=$(aws cloudformation ${CU}-stack --stack-name ${STACK_NAME} ${TIMEOUT_ARG} ${CAPABILITIES_ARG} --on-failure DELETE $@ | json "StackId")
else
    CU=update
    echo "Updating ${STACK_NAME} = ${STACK_ID}..."
    aws cloudformation ${CU}-stack --stack-name ${STACK_ID} $@
fi

[ -z "${WAIT_FOR_STACK:-}" ] || {
    echo "Waiting for stack-${CU}-complete..."
    aws cloudformation wait stack-${CU}-complete --stack-name ${STACK_ID} --no-paginate || {
        aws cloudformation describe-stack-events --stack-name ${STACK_ID} --no-paginate | json "StackEvents"
        exit 1
    }
}
