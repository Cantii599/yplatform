version: "{build}"

branches:
  only:
    - master
    - /appveyor.*/

environment:
  YP_CI_BREW_INSTALL: minimal
  YP_LOG_BOOTSTRAP: "true"
  # APPVEYOR list based on ci/env/appveyor.inc.sh
  WSLENV: YP_CI_BREW_INSTALL:YP_LOG_BOOTSTRAP:APPVEYOR:APPVEYOR_URL:APPVEYOR_API_URL:APPVEYOR_ACCOUNT_NAME:APPVEYOR_PROJECT_ID:APPVEYOR_PROJECT_NAME:APPVEYOR_PROJECT_SLUG:APPVEYOR_BUILD_FOLDER:APPVEYOR_BUILD_ID:APPVEYOR_BUILD_NUMBER:APPVEYOR_BUILD_VERSION:APPVEYOR_BUILD_WORKER_IMAGE:APPVEYOR_PULL_REQUEST_NUMBER:APPVEYOR_PULL_REQUEST_TITLE:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH:APPVEYOR_PULL_REQUEST_HEAD_COMMIT:APPVEYOR_JOB_ID:APPVEYOR_JOB_NAME:APPVEYOR_JOB_NUMBER:APPVEYOR_REPO_PROVIDER:APPVEYOR_REPO_SCM:APPVEYOR_REPO_NAME:APPVEYOR_REPO_BRANCH:APPVEYOR_REPO_TAG:APPVEYOR_REPO_TAG_NAME:APPVEYOR_REPO_COMMIT:APPVEYOR_REPO_COMMIT_AUTHOR:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL:APPVEYOR_REPO_COMMIT_TIMESTAMP:APPVEYOR_REPO_COMMIT_MESSAGE:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED:APPVEYOR_SCHEDULED_BUILD:APPVEYOR_FORCED_BUILD:APPVEYOR_RE_BUILD:APPVEYOR_RE_RUN_INCOMPLETE:PLATFORM:CONFIGURATION:APPVEYOR_ARTIFACT_UPLOAD_TIMEOUT:APPVEYOR_FILE_DOWNLOAD_TIMEOUT:APPVEYOR_REPOSITORY_SHALLOW_CLONE_TIMEOUT:APPVEYOR_CACHE_ENTRY_UPLOAD_DOWNLOAD_TIMEOUT:APPVEYOR_CACHE_SKIP_RESTORE:APPVEYOR_CACHE_SKIP_SAVE:APPVEYOR_WAP_ARTIFACT_NAME:APPVEYOR_WAP_SKIP_ACLS:APPVEYOR_BUILD_WORKER_IMAGE:APPVEYOR_SKIP_FINALIZE_ON_EXIT:APPVEYOR_SAVE_CACHE_ON_ERROR:APPVEYOR_ACS_DEPLOYMENT_UPGRADE_MODE:APPVEYOR_IGNORE_COMMIT_FILTERING_ON_TAG # editorconfig-checker-disable-line

image: Visual Studio 2019
platform: Any CPU

init:
  - git config --global core.autocrlf input
  - git config --global core.symlinks true

install:
  - git submodule sync --recursive
  - git submodule update --init --recursive
  - wsl bash -c "cat /etc/os-release"
  - wsl bash -c "./.ci.sh before_install"
  - wsl bash -c "./.ci.sh install"

# before_build:
build_script:
  - wsl bash -c "./.ci.sh before_script"
  - wsl bash -c "./.ci.sh script"
# after_build:

# before_test:
# test_script:
# after_test:

on_success:
  - wsl bash -c "./.ci.sh after_success"
on_failure:
  - wsl bash -c "./.ci.sh after_failure"
on_finish:
  - wsl bash -c "./.ci.sh after_script"

# before_deploy:
# deply_script:
# after_deploy:
