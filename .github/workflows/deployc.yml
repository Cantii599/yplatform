name: 'CD container'
'on':
  push:
    tags:
      - 'v*'
concurrency:
  group: 'deployc-${{ github.ref }}'
jobs:
  deployc-minimal-arch:
    needs: []
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-arch-0'
        yp_ci_brew_install:
          - 'minimal'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-minimal-alpine:
    needs: []
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-alpine-3.11.7'
        yp_ci_brew_install:
          - 'minimal'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-minimal-centos:
    needs: []
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-centos-8'
        yp_ci_brew_install:
          - 'minimal'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-minimal-debian:
    needs: []
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-debian-9'
          - 'yp-debian-10'
        yp_ci_brew_install:
          - 'minimal'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-minimal-ubuntu:
    needs: []
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-ubuntu-16.04'
          - 'yp-ubuntu-18.04'
          - 'yp-ubuntu-20.04'
        yp_ci_brew_install:
          - 'minimal'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-common-arch:
    needs:
      - 'deployc-minimal-arch'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-arch-0'
        yp_ci_brew_install:
          - 'common'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-common-alpine:
    needs:
      - 'deployc-minimal-alpine'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-alpine-3.11.7'
        yp_ci_brew_install:
          - 'common'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-common-centos:
    needs:
      - 'deployc-minimal-centos'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-centos-8'
        yp_ci_brew_install:
          - 'common'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-common-debian:
    needs:
      - 'deployc-minimal-debian'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-debian-9'
          - 'yp-debian-10'
        yp_ci_brew_install:
          - 'common'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
  deployc-common-ubuntu:
    needs:
      - 'deployc-minimal-ubuntu'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - 'yp-ubuntu-16.04'
          - 'yp-ubuntu-18.04'
          - 'yp-ubuntu-20.04'
        yp_ci_brew_install:
          - 'common'
    name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      YP_LOG_BOOTSTRAP: true
      YP_PRINTENV_BOOTSTRAP: '${{ secrets.YP_PRINTENV_BOOTSTRAP }}'
      YP_TRANSCRYPT_PASSWORD: '${{ secrets.YP_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_YP_CI_BREW_INSTALL: '${{ matrix.yp_ci_brew_install }}'
      GITHUB_JOB_NAME: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
    steps:
      - name: 'yplatform/bin/github-checkout'
        shell: 'bash'
        run: "set -x\n#!/usr/bin/env bash\nset -euo pipefail\n\nHOME_REAL=$(eval echo \"~$(id -u -n)\")\n[[ \"${HOME}\" = \"${HOME_REAL}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[WARN] \\$HOME is overriden to ${HOME}.\"\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[INFO] Resetting \\$HOME to ${HOME_REAL}...\"\n    export HOME=${HOME_REAL}\n}\n\n[[ -n \"${GITHUB_REPOSITORY:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REPOSITORY is undefined.\"\n    exit 1\n}\n\n[[ -n \"${GITHUB_REF:-}\" ]] || {\n    >&2 echo \"$(date +\"%H:%M:%S\")\" \"[ERR ] GITHUB_REF is undefined.\"\n    exit 1\n}\n\n# run with a clean .gitconfig, but restore on exit\nTMP_GITHUB_CHECKOUT=$(mktemp -t yplatform.XXXXXXXXXX)\ntouch ${HOME}/.gitconfig\nmv ${HOME}/.gitconfig ${TMP_GITHUB_CHECKOUT}\n\nfunction on_exit() {\n    mv ${TMP_GITHUB_CHECKOUT} ${HOME}/.gitconfig\n}\ntrap on_exit EXIT\n\n# basic git config\ngit config --global core.autocrlf false\ngit config --global core.eol lf\ngit config --global advice.detachedHead false\n\n# use https instead of everything else\n# sync with gitconfig/dot.gitconfig.github-https\ngit config --global --add url.\"https://github.com/\".insteadOf \"https://github.com/\" # git canonical https url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git://github.com/\" # git canonical git url\ngit config --global --add url.\"https://github.com/\".insteadOf \"github://\" # github url\ngit config --global --add url.\"https://github.com/\".insteadOf \"git@github.com:\" # git canonical ssh url\ngit config --global --add url.\"https://github.com/\".insteadOf \"ssh://git@github.com/\" # npm package.json's canonical git+ssh url # editorconfig-checker-disable-line\n\n# use github token transparently\n[[ -z \"${GITHUB_TOKEN:-}\" ]] || {\n    BASE64=\"base64 --wrap 0\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"base64\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1 || BASE64=\"openssl base64 -A\"\n    echo \"\" | ${BASE64} >/dev/null 2>&1\n    GIT_HTTP_EXTRAHEADER=\"AUTHORIZATION: basic $(echo -n \"x-access-token:${GITHUB_TOKEN}\" | ${BASE64})\"\n    git config --global --add http.\"https://github.com/\".extraheader \"${GIT_HTTP_EXTRAHEADER}\"\n}\n\n# use git protocol version 2 if available\nGIT_DEPTH_ARG=\n# NOTE may fail if git-man is not installed\n# ! git config --help | grep -q \"wire protocol version 2\" || {\n! grep -q \"protocol version 2\" $(command -v git) || {\n    git config --global --add protocol.version 2\n    GIT_DEPTH_ARG=\"--depth=1\"\n}\n\n# ------------------------------------------------------------------------------\n\n# clone/fetch\nGIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git\nGIT_BRANCH_ARG=\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/heads\\/}\"\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    GIT_BRANCH_ARG=\"--branch ${GITHUB_REF#refs\\/tags\\/}\"\nfi\n[[ -z \"${GITHUB_WORKSPACE:-}\" ]] || cd ${GITHUB_WORKSPACE}\ngit clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)\n# shellcheck disable=SC2193\nif [[ \"${GITHUB_EVENT_NAME:-}\" = \"pull_request\" ]]; then\n    git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\\/pull\\/}\n    GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\\/pull\\/})\n    GIT_BRANCH_DEFAULT=$(git ls-remote --symref ${GIT_URL} HEAD | head -1 | sed \"s,^ref: refs/heads/,,\" | sed \"s,\\s\\+HEAD,,\")\n    GITHUB_REF=refs/heads/${GITHUB_BASE_REF:-${GIT_BRANCH_DEFAULT}}\nfi\n\n# ------------------------------------------------------------------------------\n\n# checkout\nif [[ \"${GITHUB_REF}\" =~ ^refs/heads/ ]]; then\n    git checkout -B ${GITHUB_REF#refs\\/heads\\/} ${GITHUB_SHA:-origin/${GITHUB_REF#refs\\/heads\\/}}\nelif [[ \"${GITHUB_REF}\" =~ ^refs/tags/ ]]; then\n    git checkout ${GITHUB_REF}\nelse\n    set -x\n    printenv\n    cat ${GITHUB_EVENT_PATH:-/dev/null}\n    exit 1\nfi\n\n# submodules\ngit submodule sync --recursive\ngit submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}\n"
      - name: 'Set up QEMU'
        uses: 'docker/setup-qemu-action@v1'
      - name: 'Set up Docker Buildx'
        id: 'buildx'
        uses: 'docker/setup-buildx-action@v1'
        with:
          buildkitd-flags: '--debug'
      - shell: 'bash'
        run: './.ci.sh before_deploy'
      - shell: 'bash'
        run: './.ci.sh deploy'
      - shell: 'bash'
        run: './.ci.sh after_deploy || true'
      - name: 'Upload Artifacts'
        uses: 'actions/upload-artifact@v2'
        with:
          name: '${{ matrix.container }}-${{ matrix.yp_ci_brew_install }}'
          path: "yp-ci-echo-benchmark\nsome-job-artifact.md\nlog.sh-session"
          retention-days: 7
