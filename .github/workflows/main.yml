name: CI
'on':
  push:
    branches:
      - github*
      - master
    tags:
      - v*
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch: null
concurrency:
  group: '${{ github.ref }}'
  cancel-in-progress: true
jobs:
  main-ubuntu:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
          - ubuntu-20.04
        sf_ci_brew_install:
          - minimal
          - dev
    name: 'main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: '${{ matrix.os }}'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      GITHUB_JOB_NAME: 'main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}'
      SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_install
      - shell: bash
        run: ./.ci.sh install
      - shell: bash
        run: ./.ci.sh before_script
      - shell: bash
        run: ./.ci.sh script
      - if: failure()
        shell: bash
        run: ./.ci.sh after_failure || true
      - shell: bash
        run: ./.ci.sh after_success || true
      - if: always()
        shell: bash
        run: ./.ci.sh after_script || true
      - if: always()
        shell: bash
        env:
          SLACK_WEBHOOK: '${{ secrets.SLACK_WEBHOOK }}'
          SLACK_CHANNEL: cloud-ci
          CI_STATUS: '${{ job.status }}'
        run: ./.ci.sh notifications || true
  main-macos:
    needs:
      - main-ubuntu
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-10.15
          - macos-11.0
        sf_ci_brew_install:
          - minimal
          - dev
    name: 'main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: '${{ matrix.os }}'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      GITHUB_JOB_NAME: 'main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}'
      SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_install
      - shell: bash
        run: ./.ci.sh install
      - shell: bash
        run: ./.ci.sh before_script
      - shell: bash
        run: ./.ci.sh script
      - if: failure()
        shell: bash
        run: ./.ci.sh after_failure || true
      - shell: bash
        run: ./.ci.sh after_success || true
      - if: always()
        shell: bash
        run: ./.ci.sh after_script || true
      - if: always()
        shell: bash
        env:
          SLACK_WEBHOOK: '${{ secrets.SLACK_WEBHOOK }}'
          SLACK_CHANNEL: cloud-ci
          CI_STATUS: '${{ job.status }}'
        run: ./.ci.sh notifications || true
  main-windows:
    needs:
      - main-ubuntu
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
        sf_ci_brew_install:
          - minimal
    name: 'main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: '${{ matrix.os }}'
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      GITHUB_JOB_NAME: 'main-${{ matrix.os }}-${{ matrix.sf_ci_brew_install }}'
      SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      WSLENV: >-
        CI:V:SF_LOG_BOOTSTRAP:SF_PRINTENV_BOOTSTRAP:GH_TOKEN:GH_USERNAME:SF_TRANSCRYPT_PASSWORD:SLACK_WEBHOOK:SLACK_CHANNEL:CI_STATUS:SF_CI_BREW_INSTALL
      WSLUSER: github
      WSLGROUP: github
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - name: Set up WSLENV
        shell: bash
        run: |-
          set -x
          GITHUB_WSLENV="$(printenv | grep "^GITHUB" | cut -d"=" -f1 | sort | \
          sed "s|^GITHUB_ENV\$|GITHUB_ENV/p|" | \
          sed "s|^GITHUB_EVENT_PATH\$|GITHUB_EVENT_PATH/p|" | \
          sed "s|^GITHUB_PATH\$|GITHUB_PATH/p|" | \
          sed "s|^GITHUB_WORKSPACE\$|GITHUB_WORKSPACE/p|" | \
          tr "\n" ":")"
          echo "WSLENV=${WSLENV:-}:${GITHUB_WSLENV}" >> ${GITHUB_ENV}
      - name: Install WSL Distribution
        uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04
          update: 'false'
      - name: Set up WSL Distribution
        shell: bash
        run: >-
          set -x

          wsl bash -c "cat /etc/os-release"

          wsl bash -c "sudo addgroup --gid 2000 ${WSLGROUP}"

          wsl bash -c "sudo adduser --uid 2000 --ingroup ${WSLGROUP} --home /home/${WSLUSER} --shell /bin/bash
          --disabled-password --gecos \"Linux user\" ${WSLUSER}"

          wsl bash -c "sudo adduser ${WSLUSER} sudo"

          wsl bash -c "sudo echo \"${WSLUSER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers"

          # Use wsl.conf to fix error: chmod on .git/config.lock failed: Operation not permitted

          # See https://gist.github.com/shakahl/8b6c969768b3a54506c0fc4905d729a0

          wsl bash -c "sudo cp priv/wsl.conf /etc/wsl.conf && sudo chmod 0644 /etc/wsl.conf"
      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh before_install"
      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh install"
      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh before_script"
      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh script"
      - if: failure()
        shell: bash
        run: bin/wsl-bash -c "./.ci.sh after_failure || true"
      - shell: bash
        run: bin/wsl-bash -c "./.ci.sh after_success || true"
      - if: always()
        shell: bash
        run: bin/wsl-bash -c "./.ci.sh after_script || true"
      - if: always()
        shell: bash
        env:
          SLACK_WEBHOOK: '${{ secrets.SLACK_WEBHOOK }}'
          SLACK_CHANNEL: cloud-ci
          CI_STATUS: '${{ job.status }}'
        run: bin/wsl-bash -c "./.ci.sh notifications || true"
  mainc-arch:
    needs:
      - main-ubuntu
      - main-macos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-arch-0
        sf_ci_brew_install:
          - minimal
          - common
    name: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
      SF_DEPLOY_DRYRUN: true
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-minimal-arch:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: mainc-arch
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-arch-0
        sf_ci_brew_install:
          - minimal
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-common-arch:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: deployc-minimal-arch
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-arch-0
        sf_ci_brew_install:
          - common
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  mainc-alpine:
    needs:
      - main-ubuntu
      - main-macos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-alpine-3.11.7
        sf_ci_brew_install:
          - minimal
          - common
    name: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
      SF_DEPLOY_DRYRUN: true
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-minimal-alpine:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: mainc-alpine
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-alpine-3.11.7
        sf_ci_brew_install:
          - minimal
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-common-alpine:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: deployc-minimal-alpine
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-alpine-3.11.7
        sf_ci_brew_install:
          - common
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  mainc-centos:
    needs:
      - main-ubuntu
      - main-macos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-centos-8
        sf_ci_brew_install:
          - minimal
          - common
    name: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
      SF_DEPLOY_DRYRUN: true
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-minimal-centos:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: mainc-centos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-centos-8
        sf_ci_brew_install:
          - minimal
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-common-centos:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: deployc-minimal-centos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-centos-8
        sf_ci_brew_install:
          - common
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  mainc-debian:
    needs:
      - main-ubuntu
      - main-macos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-debian-9
          - sf-debian-10
        sf_ci_brew_install:
          - minimal
          - common
    name: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
      SF_DEPLOY_DRYRUN: true
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-minimal-debian:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: mainc-debian
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-debian-9
          - sf-debian-10
        sf_ci_brew_install:
          - minimal
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-common-debian:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: deployc-minimal-debian
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-debian-9
          - sf-debian-10
        sf_ci_brew_install:
          - common
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  mainc-ubuntu:
    needs:
      - main-ubuntu
      - main-macos
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-ubuntu-16.04
          - sf-ubuntu-18.04
          - sf-ubuntu-20.04
        sf_ci_brew_install:
          - minimal
          - common
    name: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'mainc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
      SF_DEPLOY_DRYRUN: true
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-minimal-ubuntu:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: mainc-ubuntu
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-ubuntu-16.04
          - sf-ubuntu-18.04
          - sf-ubuntu-20.04
        sf_ci_brew_install:
          - minimal
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
  deployc-common-ubuntu:
    if: 'startsWith(github.ref, ''refs/tags/'')'
    needs: deployc-minimal-ubuntu
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        container:
          - sf-ubuntu-16.04
          - sf-ubuntu-18.04
          - sf-ubuntu-20.04
        sf_ci_brew_install:
          - common
    name: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      SF_LOG_BOOTSTRAP: true
      SF_PRINTENV_BOOTSTRAP: '${{ secrets.SF_PRINTENV_BOOTSTRAP }}'
      SF_TRANSCRYPT_PASSWORD: '${{ secrets.SF_TRANSCRYPT_PASSWORD }}'
      V: '${{ secrets.V }}'
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_TOKEN: '${{ secrets.DOCKER_TOKEN }}'
      GITHUB_MATRIX_CONTAINER: '${{ matrix.container }}'
      GITHUB_MATRIX_SF_CI_BREW_INSTALL: '${{ matrix.sf_ci_brew_install }}'
      GITHUB_JOB_NAME: 'deployc-${{ matrix.container }}-${{ matrix.sf_ci_brew_install }}'
    steps:
      - name: support-firecloud/bin/github-checkout
        shell: bash
        run: |
          set -x
          #!/usr/bin/env bash
          set -euo pipefail

          # basic git config
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead false

          # use https instead of everything else
          git config --global --add url."https://github.com/".insteadOf "git://github.com/"
          git config --global --add url."https://github.com/".insteadOf "git@github.com:"
          git config --global --add url."https://github.com/".insteadOf "github://"
          git config --global --add url."https://github.com/".insteadOf "ssh://git@github.com/"

          # use github token transparently
          BASE64="base64 --wrap 0"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="base64"
          echo "" | ${BASE64} >/dev/null 2>&1 || BASE64="openssl base64 -A"
          echo "" | ${BASE64} >/dev/null 2>&1
          GIT_HTTP_EXTRAHEADER="AUTHORIZATION: basic $(echo -n "x-access-token:${GITHUB_TOKEN}" | ${BASE64})"
          git config --global --add http."https://github.com/".extraheader "${GIT_HTTP_EXTRAHEADER}"

          # use git protocol version 2 if available
          ! git config --help | grep -q "wire protocol version 2" || {
              git config --global --add protocol.version 2
              GIT_DEPTH_ARG="--depth=1"
          }

          # ------------------------------------------------------------------------------

          # clone/fetch
          GIT_URL=${GITHUB_SERVER_URL:-${GITHUB_URL:-https://github.com}}/${GITHUB_REPOSITORY}.git
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/heads\/}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              GIT_BRANCH_ARG="--branch ${GITHUB_REF#refs\/tags\/}"
          fi
          cd ${GITHUB_WORKSPACE}
          git clone ${GIT_DEPTH_ARG:-} ${GIT_BRANCH_ARG} ${GIT_URL} $(pwd)
          # shellcheck disable=SC2193
          if [[ "${GITHUB_EVENT_NAME}" = "pull_request" ]]; then
              git fetch ${GIT_DEPTH_ARG:-} origin ${GITHUB_REF}:refs/remotes/pull/${GITHUB_REF#refs\/pull\/}
              GITHUB_SHA=$(git rev-parse pull/${GITHUB_REF#refs\/pull\/})
              GITHUB_REF=refs/heads/${GITHUB_BASE_REF}
          fi

          # ------------------------------------------------------------------------------

          # checkout
          if [[ "${GITHUB_REF}" =~ ^refs/heads/ ]]; then
              git checkout -B ${GITHUB_REF#refs\/heads\/} ${GITHUB_SHA}
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
              git checkout ${GITHUB_REF}
          else
              set -x
              printenv
              cat ${GITHUB_EVENT_PATH}
              exit 1
          fi

          # submodules
          git submodule sync --recursive
          git submodule update --init --recursive --force ${GIT_DEPTH_ARG:-}
      - shell: bash
        run: ./.ci.sh before_deploy
      - shell: bash
        run: ./.ci.sh deploy
      - shell: bash
        run: ./.ci.sh after_deploy || true
