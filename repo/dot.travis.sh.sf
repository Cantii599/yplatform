#!/usr/bin/env bash

SUPPORT_FIRECLOUD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source ${SUPPORT_FIRECLOUD_DIR}/sh/common.inc.sh

[[ "$1" != "debug" ]] || {
    echo
    echo "  Creating a debugging subshell..."
    echo
    PS1="${debian_chroot:+($debian_chroot)}\u:\w\$ " ${SHELL}
    exit 0
}

function sf_rvm_unfuck() {
    # from https://github.com/matthew-brett/multibuild/blob/34b988aab60a93fa3c7bd1eb88dd7c4361ca464f/common_utils.sh#L17

    # Work round bug in travis xcode image described at
    # https://github.com/direnv/direnv/issues/210
    shell_session_update() { :; }

    # Workaround for https://github.com/travis-ci/travis-ci/issues/8703
    # suggested by Thomas K at
    # https://github.com/travis-ci/travis-ci/issues/8703#issuecomment-347881274
    unset -f cd
    unset -f pushd
    unset -f popd
}
sf_rvm_unfuck

function sf_private_submodules() {
    [ -z "${GH_TOKEN:-}" ] || {
        echo_do "Found GH_TOKEN, setting up github.com HTTPS authentication..."
        echo -e "machine github.com\n  login ${GH_TOKEN}" >> ~/.netrc

        # cover git submodules's canonical ssh url
        git config --global url.https://github.com/tobiipro/.insteadOf git@github.com:tobiipro/
        # cover npm package.json's canonical git+ssh url
        git config --global url.https://github.com/tobiipro/.insteadOf ssh://git@github.com/tobiipro/
        echo_done
    }
}

function sf_transcrypt() {
    [ "${TRAVIS_EVENT_TYPE}" = "pull_request" ] || \
    [ ! -x "./transcrypt" ] || \
    [ -z "${TRANSCRYPT_PASSWORD:-}" ] || {
        echo_do "Found TRANSCRYPT_PASSWORD, setting up transcrypt..."
        ./transcrypt -y -c aes-256-cbc -p "${TRANSCRYPT_PASSWORD}"
        unset TRANSCRYPT_PASSWORD
        echo_done
    }
}

function sf_pyenv_init() {
    eval "$(pyenv init -)"
}

function sf_os() {
    [ "${TRAVIS_DEBUG_MODE:-}" != "true" ] || {
        SF_LOG_BOOTSTRAP=true
    }
    echo_info "Running sf_os with SF_LOG_BOOTSTRAP=${SF_LOG_BOOTSTRAP:-}"

    local BOOTSTRAP_SCRIPT="${SUPPORT_FIRECLOUD_DIR}/ci/${TRAVIS_OS_NAME}/bootstrap"

    if [ "${SF_LOG_BOOTSTRAP:-}" = "true" ]; then
        ${BOOTSTRAP_SCRIPT}
        return 0
    fi

    local TMP_SF_OS_LOG=$(mktemp)
    echo_info "Redirecting sf_os into ${TMP_SF_OS_LOG} to minimize Travis log..."

    echo " 0 1 2 3 4 5 6 7 8 9101112131415 min"
    while :;do echo -n " ."; sleep 60; done &
    local WHILE_LOOP_PID=$!
    trap "kill ${WHILE_LOOP_PID}" EXIT
    ${BOOTSTRAP_SCRIPT} >${TMP_SF_OS_LOG} 2>&1 || {
        echo
        echo_err "sf_os failed. The latest log tail follows:"
        tail -n100 ${TMP_SF_OS_LOG}
        return 1
    }
    echo
    kill ${WHILE_LOOP_PID} && trap " " EXIT
}

function sf_newer_pacote() {
    echo_do "Setting up a newer pacote... (temporary fix)"
    # temporary fix for spurious ENOVERSIONS on 'npm install'
    # https://github.com/tobiipro/support-firecloud/issues/17
    npm install --global pacote
    rm -rf $(npm root -g)/npm/node_modules/pacote
    mv $(npm root -g)/pacote $(npm root -g)/npm/node_modules/pacote
    echo_done
}

function sf_travis_run() {
    >&2 echo "$(date +"%H:%M:%S") [DO  ] $@"

    if [ "$(type -t "travis_run_${1}")" = "function" ]; then
        eval "travis_run_${1}"
    elif [ "$(type -t "sf_travis_run_${1}")" = "function" ]; then
        eval "sf_travis_run_${1}"
    fi

    >&2 echo "$(date +"%H:%M:%S") [DONE] $@"
}

function sf_travis_run_before_install() {
    sf_private_submodules
    sf_transcrypt
    sf_os
    sf_pyenv_init
    sf_newer_pacote

    [[ "${TRAVIS_DEBUG_MODE:-}" != "true" ]] || {
        echo
        echo "  Please run \`./.travis.sh debug\` to activate your debug session !!!"
        echo
    }
}

function sf_travis_run_install() {
    make deps
}

function sf_travis_run_script() {
    make all test
}

function sf_travis_run_before_deploy() {
    make snapshot
    make dist
}

function sf_travis_run_after_script_upload_job_artifacts() {
    local CI_JOB_GIT_REF=refs/jobs/${TRAVIS_JOB_ID}
    local CI_JOB_S3_URL=https://infra-attentionpanel-com-eu-west-1.s3.amazonaws.com/ci/${TRAVIS_JOB_ID}/
    local CI_JOB_GITHUB_UI_URL=https://github.com/${TRAVIS_REPO_SLUG}/tree/${CI_JOB_GIT_REF}
    local CI_JOB_S3_UI_URL=https://s3.console.aws.amazon.com/s3/buckets/infra-attentionpanel-com-eu-west-1/ci/${TRAVIS_JOB_ID}/
    echo_do "Uploading job artifacts..."
    [[ -z "${GH_TOKEN:-}" ]] || echo_info "View on Github: ${CI_JOB_GITHUB_UI_URL}"
    echo_info "View on S3: ${CI_JOB_S3_UI_URL}"

    git checkout --orphan jobs/${TRAVIS_JOB_ID}
    git reset -- .
    mv .gitignore.jobs .gitignore
    git add -f .gitignore
    git add .

    cat <<-EOF >README.md
# Job ${TRAVIS_JOB_WEB_URL}

## Environment

<details>
    <summary>TRAVIS_*<summary>
    <code>
$(printenv | grep "^TRAVIS_")
    </code>
</details>

## Files

$(git ls-files | xargs -I {} echo "* {}")

EOF

    git add -f README.md
    git commit -m "${TRAVIS_JOB_ID}"

    # Upload to git refs/job/<job_id>
    [[ -z "${GH_TOKEN:-}" ]] || git push -f https://${GH_TOKEN}@github.com:${TRAVIS_REPO_SLUG}.git HEAD:${CI_JOB_GIT_REF} || true

    # Upload to public S3
    git ls-files | xargs -I {} \
        curl -XPUT -T "{}" "${CI_JOB_S3_URL}{}" || true

    git checkout -f -

    echo_done
}

function sf_travis_run_before_cache_brew() {
    which brew >/dev/null 2>&1 || return 0
    local HOMEBREW_PREFIX=$(brew --prefix)
    local TRAVIS_CACHE_HOMEBREW_PREFIX
    brew cleanup

    case $(uname -s) in
        Darwin)
            TRAVIS_CACHE_HOMEBREW_PREFIX=~/.homebrew
            ;;
        Linux)
            TRAVIS_CACHE_HOMEBREW_PREFIX=~/.linuxbrew
            ;;
        *)
            echo_err "brew: $(uname -s) is an unsupported OS."
            return 1
            ;;
    esac

    if [[ "$(cd ${HOMEBREW_PREFIX} && pwd)" = "$(cd ${TRAVIS_CACHE_HOMEBREW_PREFIX} && pwd)" ]]; then
        return 0
    fi

    echo_do "brew: Caching ${HOMEBREW_PREFIX}/Homebrew..."
    mkdir -p ${TRAVIS_CACHE_HOMEBREW_PREFIX}/Homebrew
    rsync -aW --inplace --delete \
        ${HOMEBREW_PREFIX}/Homebrew/ \
        ${TRAVIS_CACHE_HOMEBREW_PREFIX}/Homebrew/
    echo_done

    # cache non-bottled formulae
    rm -rf ${TRAVIS_CACHE_HOMEBREW_PREFIX}/Cellar/*
    for f in $(find ${HOMEBREW_PREFIX}/Cellar -mindepth 2 -maxdepth 2 -print); do
        f="$(basename $(dirname "${f}"))/$(basename "${f}")" # name/version
        local POURED_FROM_BOTTLE="$(cat ${HOMEBREW_PREFIX}/Cellar/${f}/INSTALL_RECEIPT.json | \
            /usr/bin/python \
                -c 'import sys,json;print json.dumps(json.load(sys.stdin)["poured_from_bottle"])' || \
                echo false)"
        [[ "${POURED_FROM_BOTTLE}" != "true" ]] || continue

        echo_do "brew: Caching non-bottled ${HOMEBREW_PREFIX}/Cellar/${f}..."
        mkdir -p ${TRAVIS_CACHE_HOMEBREW_PREFIX}/Cellar/${f}
        rsync -aW --inplace --delete \
            ${HOMEBREW_PREFIX}/Cellar/${f}/ \
            ${TRAVIS_CACHE_HOMEBREW_PREFIX}/Cellar/${f}/
        echo_done
    done
}

function sf_travis_run_before_cache_stats() {
    echo_do "Showing cache stats..."
    local YAML2JSON="ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))'"
    for f in $(eval "${YAML2JSON} .travis.yml" | jq -r ".cache.directories[]"); do
        eval "f=${f}"
        [[ -d "${f}" ]] || continue
        du -hcs ${f} | head -n+1
    done
    echo_done
}

function sf_travis_run_before_cache() {
    sf_travis_run_before_cache_brew
    sf_travis_run_before_cache_stats || \
        echo_skip "Showing cache stats..."
}


function sf_travis_run_all() {
    local TRAVIS_PHASES="$(cat <<-EOF
before_install
install
before_script
script
EOF
)"

    for f in ${TRAVIS_PHASES}; do
        sf_travis_run $f;
    done
}

[[ -z "$*" ]] || sf_travis_run $@
